function  samp_points=synth(sig,samp_rate,trial_dur,varargin)
% SYNTH is lowpass synth function.
% SAMP_POINTS=SYNTH(SIG,SAMP_RATE,TRIAL_DUR,VARARGIN) Samples the signal
% according to the givan SAMP_RATE and TRIAL_DUR. Returns the sampled
% points.

switch nargin
    case 4
        params=varargin{:};
        if ~(isempty(params))
            freq=params(1);
        else
            freq_comp=get(sig,'Freq_comp');
            freq=get(freq_comp,'Static_value');
        end
        samp_points=(1+square(phase+2*pi/samp_rate*freq*(1:round(samp_rate*(trial_dur/1000)))))/2;
        win=ones(1,samp_rate/100);
        win=win/sum(win(:));
        samp_points=filter(win,1,samp_points);
Fs = 44100;  % Sampling Frequency

N     = 7;    % Order
Fpass = 50;   % Passband Frequency
Apass = 1;    % Passband Ripple (dB)
Astop = 100;  % Stopband Attenuation (dB)

% Calculate the zpk values using the ELLIP function.
[z,p,k] = ellip(N, Apass, Astop, Fpass/(Fs/2));

% To avoid round-off errors, do not use the transfer function.  Instead
% get the zpk representation and convert it to second-order sections.
[sos_var,g] = zp2sos(z, p, k);
Hd          = dfilt.df2sos(sos_var, g);

    otherwise
        treat_error('Wrong input argument to lowpass/synth');
end
